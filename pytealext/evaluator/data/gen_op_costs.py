import os
import re

HERE = os.path.dirname(os.path.abspath(__file__))

OP_SEARCH_PATTERN = re.compile(r"\"(?P<opcode>[^\"]+)\".+ (?P<cost_function>\b\w+\(.*\))}")

matches: list[dict[str, str]] = []

CHEAP_PATTERN = re.compile(
    r"(detDefault|detBranch|detSwitch|immediates|constants|field|typed|only|immKinded)\(([^\(\)]*)\)(?!.*costs)"
)
COSTLY_PATTERN = re.compile(r"costly\((\d+)\)")


def translate_cost_function(opcode: str, fn: str) -> str:
    """Simplify go functions to only include the cost"""

    def lambdify(cost) -> str:
        return f"(lambda *a, **k: {cost})"

    if m := re.match(CHEAP_PATTERN, fn):
        return lambdify(1)
    if m := re.match(COSTLY_PATTERN, fn):
        return lambdify(m.group(1))
    return lambdify(f"NotImplementedError('{opcode}: {fn}')")


with open(os.path.join(HERE, "op_costs.txt"), "r", encoding="utf-8") as f:
    for line in f.readlines():
        line = line.strip()
        if not line or line.startswith(("//")):
            continue
        res = re.search(OP_SEARCH_PATTERN, line)
        if res is None:
            continue
        matches.append(res.groupdict())

with open(os.path.join(HERE, "op_costs.py"), "w", encoding="utf-8") as f:
    f.write("# This file was auto-generated by op_cost_gen.py\n\n")
    f.write("from typing import Callable\n\n")
    f.write("OP_COSTS: dict[str, Callable] = {\n")
    for match in matches:
        cost_fn = translate_cost_function(match["opcode"], match["cost_function"])
        f.write(f'    "{match["opcode"]}": {cost_fn},\n')
    f.write("}\n")
